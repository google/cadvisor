// Copyright 2022 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// generated by build/assets.sh; DO NOT EDIT

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/internal/pages/assets/html/containers.html (9.554kB)

package pages

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdInternalPagesAssetsHtmlContainersHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x4d\x73\xdb\x38\xd2\x3e\x4b\xbf\xa2\x87\xf5\x1e\x66\xaa\x42\xca\x4e\xfc\x1e\x36\x2b\xab\x4a\xa3\x24\x3b\xda\x71\xec\x94\x65\xcf\xd4\x1c\x41\xb2\x45\x22\x86\x08\x0c\x00\x4a\xd6\xba\xfc\xdf\xb7\x00\x90\x12\x3f\xa5\xf8\xa3\x92\xd5\xc5\x12\x81\xee\x7e\xfa\xe9\x6e\xa0\x41\x78\xfc\x93\xef\x0f\x01\x66\x5c\x6c\x25\x4d\x52\x0d\x6f\x4f\x4e\xcf\xe0\x5f\x9c\x27\x0c\x61\x9e\x45\x01\x4c\x19\x83\x6b\x33\xa4\xe0\x1a\x15\xca\x35\xc6\xc1\x70\x08\x70\x41\x23\xcc\x14\xc6\x90\x67\x31\x4a\xd0\x29\xc2\x54\x90\x28\xc5\x72\xe4\x0d\xfc\x81\x52\x51\x9e\xc1\xdb\xe0\x04\x7e\x36\x13\xbc\x62\xc8\xfb\xe5\x9f\x43\x80\x2d\xcf\x61\x45\xb6\x90\x71\x0d\xb9\x42\xd0\x29\x55\xb0\xa4\x0c\x01\xef\x23\x14\x1a\x68\x06\x11\x5f\x09\x46\x49\x16\x21\x6c\xa8\x4e\xad\x99\x42\x49\x30\x04\xf8\xab\x50\xc1\x43\x4d\x68\x06\x04\x22\x2e\xb6\xc0\x97\xd5\x79\x40\xb4\xc1\x6b\x3e\xa9\xd6\xe2\xfd\x68\xb4\xd9\x6c\x02\x62\xb1\x06\x5c\x26\x23\xe6\xe6\xa9\xd1\xc5\x7c\xf6\xf1\x72\xf1\xd1\x7f\x1b\x9c\x18\x89\xdb\x8c\xa1\x52\x20\xf1\xef\x9c\x4a\x8c\x21\xdc\x02\x11\x82\xd1\x88\x84\x0c\x81\x91\x0d\x70\x09\x24\x91\x88\x31\x68\x6e\xd0\x6e\x24\xd5\x34\x4b\xde\x80\xe2\x4b\xbd\x21\x12\x87\x00\x31\x55\x5a\xd2\x30\xd7\x35\xaa\x4a\x6c\x54\xd5\x26\xf0\x0c\x48\x06\xde\x74\x01\xf3\x85\x07\xbf\x4e\x17\xf3\xc5\x9b\x21\xc0\x9f\xf3\x9b\xdf\xae\x6e\x6f\xe0\xcf\xe9\xf5\xf5\xf4\xf2\x66\xfe\x71\x01\x57\xd7\x30\xbb\xba\xfc\x30\xbf\x99\x5f\x5d\x2e\xe0\xea\x13\x4c\x2f\xff\x82\xdf\xe7\x97\x1f\xde\x00\x52\x9d\xa2\x04\xbc\x17\xd2\xe0\xe7\x12\xa8\x21\xd1\xc4\x0d\x60\x81\x58\x03\xb0\xe4\x0e\x90\x12\x18\xd1\x25\x8d\x80\x91\x2c\xc9\x49\x82\x90\xf0\x35\xca\x8c\x66\x09\x08\x94\x2b\xaa\x4c\x28\x15\x90\x2c\x1e\x02\x30\xba\xa2\x9a\x68\xfb\xa4\xe5\x54\x30\xf4\xfd\xc9\x70\x38\x4e\xf5\x8a\x4d\x86\x00\xe3\x14\x49\x3c\xb1\x21\x18\x6b\xaa\x19\x4e\xa2\x69\xbc\xa6\x8a\x4b\xf0\xe1\xe1\x21\xf8\x40\x95\x60\x64\x7b\x49\x56\xf8\xf8\x38\x1e\xb9\x29\x6e\xba\x8a\x24\x15\x1a\x94\x8c\xce\xbd\x87\x87\xe0\x9a\x73\xfd\xf8\xa8\x8c\xe5\x68\x24\xb8\x10\x28\x83\x15\xcd\x82\xaf\xca\x9b\x8c\x47\x6e\x72\x21\xf9\x93\xef\xc3\x05\xd1\xa8\xb4\xcd\x21\xca\x30\x36\xd8\x61\x45\x33\xba\xa4\x18\xc3\x6c\xb1\x00\x83\xd3\xce\x66\x34\xbb\x03\x89\xec\xdc\x53\x7a\xcb\x50\xa5\x88\xda\x83\x54\xe2\xb2\x6d\x37\xe4\x5c\x2b\x2d\x89\xf0\xcf\x82\x93\xe0\xc4\x0f\x51\x93\xe0\xad\xc5\x11\x29\xe5\x4d\x86\x7b\x00\x57\xc2\x50\x44\x98\x61\x67\x85\x2f\x35\x67\x95\xf8\xef\x82\xd3\xe0\xb4\x65\xed\x29\x1a\x23\x9e\x99\x6a\x41\xa9\x5a\x80\x0f\x32\xf6\x6f\xb2\x26\x0b\x17\x90\x9d\x27\x87\x02\xf4\xf5\xef\x1c\xe5\xd6\x7f\x17\xfc\x7f\x01\xb8\x23\x4c\x87\xe4\x0f\x10\xdd\xd6\xb4\xd7\xa5\xb7\x02\xcf\x3d\x8d\xf7\x7a\xf4\x95\xac\x89\x7b\xea\x75\x9b\x60\x9c\xc4\x28\x0f\x00\x7b\x8a\xb2\x0a\xaf\x4d\x85\xe3\x51\x59\x03\xe3\x90\xc7\xdb\xc2\x46\x4c\xd7\x10\x31\xa2\xd4\xb9\xb7\x93\x75\xa9\xe2\xab\x94\x6f\x22\xa2\xd0\x83\x9d\x7b\xa4\x19\x4e\x6f\x2f\xcc\x7c\xb5\xf2\x4f\xdf\x7a\x40\xe3\x73\x8f\xf1\x84\x7b\x3b\xb1\x11\xd9\x7d\xad\xd9\x2b\x45\x26\xc3\x41\x75\x40\x90\x04\x7d\x03\x16\xa5\x19\x32\xd5\x7b\x3a\x69\x17\x69\x7a\x6a\xe4\x46\x31\x5d\x9b\xbf\x9c\x95\xe2\xa1\x44\x12\x47\x32\x5f\x85\x4e\xfa\xe1\x41\x92\x2c\x41\xf8\x3f\x41\x24\x66\x7a\xb6\x73\xf3\xfd\x39\x04\x5f\xea\xcf\xd4\xe3\xa3\x35\xc8\xe8\xa4\xe2\x6c\x53\x32\xb8\xa0\xd9\xdd\xe3\xa3\x37\xe9\x18\xba\xc1\x7b\x6d\xd0\x91\xc9\x78\xc4\x68\x01\x00\xb3\xd8\x28\x1e\x8f\x38\xdb\x93\x62\x81\xbb\x1f\x0f\x0f\x74\x09\xc1\x5c\x39\x52\x8f\x70\x05\xc5\x67\x9c\x9e\xed\x41\x06\xc1\x28\xe6\xd1\x9d\x61\xec\x83\xfd\x0b\x7b\x9f\x1c\x98\xf4\xac\xc7\xb4\x03\x57\x05\xb2\xc8\xc3\xa8\xca\xc8\xcb\x62\xf7\x6e\x52\xd3\x37\x1e\xa5\xef\xaa\x81\xab\x08\x33\xaa\xb4\x9f\x48\x9e\x8b\x46\xe4\x54\x45\x81\x0d\x5b\x13\xe1\xa0\x96\x9c\xb5\xf9\x65\xb0\xda\x46\x7c\xaa\x71\x65\x83\x58\x9b\xbf\x8f\x60\x23\x78\x15\xd6\xfa\x29\x74\x0c\xba\x18\x2c\x34\xd1\xf9\x6b\x10\xf8\x41\xd2\x35\x4a\x70\xfa\x9a\x04\xe6\xec\x28\x7f\x2e\x35\x94\x15\xb7\xfc\x35\xf0\xb9\x94\x77\x6a\xa0\x83\xa2\xb1\x12\x24\x2b\xad\x18\x35\x3e\x23\x21\x32\xcb\x5d\x55\x77\xf0\x3b\x6e\x0d\x75\x66\xfa\x04\x9a\x83\x7f\x10\x96\xdb\xca\x6d\xd6\x45\x9d\x35\xe7\xec\x1e\xdb\xe0\x79\xd0\x16\x9a\x4b\x92\xe0\x38\x94\x93\x02\x90\x51\xd5\x47\xd6\x60\xcf\x95\x35\xdf\xe2\xaa\x1f\xd5\x53\xf9\xaa\xe8\x6f\xf3\x55\x1d\xac\xf3\x35\xd8\xd1\x35\x18\x8f\x72\x66\xbd\x29\x99\x2c\x1e\xf4\x65\x6b\x57\x8d\x3b\xaf\xe6\x2b\x92\xe0\xf1\x0c\x85\xdd\xa7\x3f\x55\xa1\xf2\x31\x39\xeb\x54\xbb\x64\xad\x8c\x54\x71\x39\x6d\x66\xbf\x70\x79\xe2\x53\x2b\x63\xf6\xad\xda\x2c\x13\xc2\x50\xee\x7f\x1f\xf3\xed\x1a\x15\xcf\x65\x84\x6a\xba\x26\x94\x99\x56\xf9\x15\x6a\x70\xae\x38\xb3\xed\x66\xa3\xfe\x9c\xc9\x99\xc8\xab\xc6\x7a\x13\xad\xc2\x44\x6f\xfe\x00\x89\x34\x5d\x9b\xc6\xbc\xb0\xe8\xdb\x7e\x14\x04\xc9\x90\xb9\xef\xde\x64\xf6\xe5\xd6\x85\x7f\xaf\xb1\x58\xbc\x05\x46\x06\x4e\x70\x61\x1a\xe4\x9d\xe3\x87\x4d\x1e\xaa\xa3\x94\x48\x13\xc7\x32\x47\x85\xa4\x99\x76\x0f\xdb\xc6\xa0\xa6\x26\xcf\xe8\x4e\x8d\xaa\xaa\x69\x23\xaf\x06\xb1\xc3\x97\xcf\xe4\xfe\x95\xdc\xf9\x4c\xee\xc1\xaa\x6a\x78\x34\xe3\x75\x87\xf6\x16\xfb\x7d\x8a\xf8\x8b\x5c\x52\x77\x2f\x77\x67\xca\x18\xdf\x98\xa3\x04\x6f\x07\xc9\x58\x68\x18\x84\xe0\x33\x89\x52\x9a\xe1\x3c\x5b\xf2\xe0\x32\x5f\x59\xb9\x72\x8d\x69\xa3\x2f\x97\x9a\xdd\x6f\xe7\xc4\x67\x5c\x71\xb9\xfd\xbe\x09\xef\x6c\x1e\xc8\x79\x37\x21\x70\x6f\x08\xac\x9a\x97\xd3\x5b\x51\xd6\xac\x00\xfa\x1f\x3c\x60\xb8\x3f\x69\x0a\xf9\xdb\x8c\xea\x03\xf2\xcf\xc9\xaa\x42\xcf\x2b\x15\x4a\x57\x91\xb4\x9d\x3e\x5a\x23\xbd\xee\x16\x92\x2f\x70\x74\xb1\x21\xe2\xb5\x16\xb9\x0d\x11\x9d\xcb\x42\xdb\xe3\x8a\xd5\x67\x78\x5d\x91\x3e\xe2\x79\xb3\xf4\x0a\xef\x6a\x5d\xe8\xb3\x37\xb3\x5b\x65\x5a\xa3\xfe\x4e\xdc\x56\x5e\x51\x7f\x42\xd2\x15\x91\xdb\x03\x6d\x80\x99\x65\x2c\xd0\x2c\x69\x37\x02\xf5\x69\x45\x31\x5f\xad\x51\xae\x29\x6e\x0e\xb7\x07\xd5\x0e\x21\x37\x88\xfd\x84\xe4\x09\x7a\x75\x95\xe6\x34\xbb\x6b\x19\x7e\x88\x37\x5f\x24\x8f\x50\xa9\x63\xdd\x4e\xd5\x1d\x51\x8a\xf8\x9a\x8b\x6f\x72\xa8\xa7\xcf\xf8\x8e\x6e\xda\x96\xe3\x5b\x1c\xec\xf0\xa6\x61\xe0\x6c\x72\xc3\x35\x61\x50\xe6\xe1\x99\xcd\xcc\x0a\x3f\x91\xc8\x7d\x6d\xa6\xf8\x2e\xf0\x51\x4a\xa4\xde\x93\x02\xe5\xdb\x22\xa3\x6a\xf6\xe5\x16\x2e\x38\x89\x61\xba\x46\x79\x40\x1f\xe3\x24\xae\x2b\xda\xbd\x44\xaa\x22\xb3\x98\x40\xd8\x23\xb4\xec\x55\x26\x50\xfa\x66\xff\xef\xc4\xd7\xad\xf2\x57\x89\xe4\x2e\xe6\x9b\xac\x4f\xa7\x53\x15\x96\xd3\x7a\x95\xb6\x53\xe3\xe8\xee\xfc\x1d\xd3\xa4\xdc\xa8\xbf\x53\xa6\xac\xac\xb9\xe3\x61\x08\xe5\xa8\xf1\xa4\x02\x40\xf2\x0d\x74\x1f\x78\x0e\x86\xb0\x31\xad\xbd\x1c\xff\xc3\x9e\x2d\x6b\xae\x4a\x9e\x48\xb4\xef\x3c\xa1\xf5\xe9\x9a\xe8\x87\x44\x42\xf5\x87\x1f\x9b\x83\xaa\xf4\xca\x75\xc4\x0d\xa4\x5c\xfb\x8e\x8a\x4e\xcd\x50\xdf\xab\x94\xf4\x79\xc6\xb6\xde\xe4\x37\xae\xa1\x0c\x98\x3b\x24\x77\x48\xb6\xd9\x7c\x0a\x5c\x9a\x2d\x79\x03\x6c\xc4\x59\xfc\x1c\xb4\x33\xce\xe2\x6f\x85\x3b\x18\x74\xe2\xee\x7e\xd8\x8e\xdc\x3b\xaf\x9a\x5d\x1a\xef\x9b\xab\xcf\x13\x8b\xf2\x12\xf5\x86\xcb\xbb\x27\x56\xe5\xe0\xe5\xe5\x58\x18\x2e\x36\xfb\xa7\x14\xe2\xa0\x39\x1a\x4b\x2e\x4c\xf2\xb7\x0b\x24\xcc\xb5\xe6\xbb\x78\x85\x3a\x83\x50\x67\x7e\x8c\x4b\x92\x33\x0d\xa5\x9c\xaf\x79\x92\x30\xf4\x8a\x57\xda\x4e\xc8\xf1\x9c\x39\x94\xbe\x42\x86\x91\x3d\x02\xec\x8c\x41\x4c\x34\x29\x44\x2b\x18\x80\x48\x4a\xfc\x94\x28\xc1\x45\x2e\xce\x3d\x2d\x73\x2c\x1e\xe2\xbd\x20\x59\x8c\xf1\xb9\xb7\x24\x4c\x61\x47\x8a\xb9\xf4\xea\x36\x5c\xc6\xba\x3b\xbf\x6a\x89\x19\x11\x89\x95\xb9\x83\x32\x13\x9c\x67\x2d\x96\x72\xd6\x6d\xd2\x6b\x12\xec\xaf\x30\xcb\x3d\x90\xdc\x78\xec\xbe\x5b\xc7\x6c\x77\xc9\x30\x0e\xb7\x07\x19\x6b\xe7\x7c\xf1\x7a\xe8\x40\xda\x3e\x65\x41\x4e\x25\xcf\x93\x54\xe4\xba\xbd\x0a\xee\x96\xe5\x12\x5e\xb8\xd5\xa8\xda\xdb\xf7\x33\xcc\x7e\x94\x92\xdb\xd7\xc7\xad\x2d\xa0\xb4\x85\x76\x46\xbf\xb1\x86\xf3\x8d\x0a\xfd\xa4\x7e\xd8\x96\xf9\x89\x32\x54\x5b\xa5\x71\xf5\xed\x1d\xe4\x72\x27\xe3\xf6\xbe\xce\x26\xb2\x5f\x53\xcf\x32\x35\xcb\x95\xe6\xab\xcf\xa8\x25\x8d\x9e\xca\xc7\x91\xc5\x6a\x70\x88\x81\xa9\xbb\xd5\x36\x79\x0c\x85\xf5\xe6\x8a\x75\x28\x57\x1a\xbd\x94\x75\xc2\x5f\x39\x3d\x47\xf3\x61\xd0\x3c\x6c\x76\xdc\x82\xfc\xb0\xd4\xe8\xb8\x3b\x39\x96\x1d\xdf\xd6\x54\x09\x30\x7d\xb3\x6d\x6b\xde\x37\xd7\x0b\x9a\x89\x5c\xd7\x5a\xdd\xea\x0d\x89\x1f\xbb\x8b\x38\x3f\xe2\x79\xa6\xbd\xce\xfd\x7b\xb7\x75\x77\xc9\x59\xf5\x3d\x72\x6b\xc2\x72\x3c\x3f\x3d\x69\x40\xee\x5f\x68\x3a\x11\xd6\xba\xc1\x86\xa6\xee\x05\xf0\x99\x1c\xba\x66\xe4\x28\x8d\x45\x1b\xf1\xbf\xc9\x64\xad\xd5\x72\x56\x24\x67\xac\x62\x26\x64\x3c\xba\x6b\x32\xd0\xde\x1f\x9b\x3d\xf9\x2b\x86\xa5\x67\xe9\xee\x18\xac\x0e\x55\x06\x0e\xdf\xa6\x97\xc2\x89\xfd\xaf\xa3\xc0\x22\x54\x81\x42\x7d\x95\x99\x93\xe5\x8c\x30\x16\x92\xe8\xee\x67\xa5\x89\xd4\x5f\x48\x82\x3f\x3f\x3c\x04\xbb\x1b\x56\x77\x23\xfd\x06\xcc\xb3\xda\xf9\xdc\x3e\x6a\x1d\xc7\xec\x53\x77\xd5\x6b\xbf\x96\xf7\xbe\xbf\xd8\x7f\x49\x32\x9f\x58\x92\x8d\xbb\x3f\x31\x76\xea\x57\x35\xc5\xa4\xfa\xd5\xbe\xbb\xd1\x1f\x8f\xdc\xff\xbb\xfc\x37\x00\x00\xff\xff\x40\x21\x01\x4e\x52\x25\x00\x00")

func cmdInternalPagesAssetsHtmlContainersHtmlBytes() ([]byte, error) {
	return bindataRead(
		_cmdInternalPagesAssetsHtmlContainersHtml,
		"cmd/internal/pages/assets/html/containers.html",
	)
}

func cmdInternalPagesAssetsHtmlContainersHtml() (*asset, error) {
	bytes, err := cmdInternalPagesAssetsHtmlContainersHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/internal/pages/assets/html/containers.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0xea, 0xa6, 0x77, 0xb6, 0x4d, 0x35, 0xb4, 0x31, 0xcb, 0x2a, 0x5, 0xb4, 0x7c, 0xcb, 0x7e, 0xcf, 0x72, 0xd, 0xe7, 0x7e, 0xd0, 0x68, 0x82, 0x40, 0xa7, 0x5f, 0xd7, 0xf3, 0x45, 0x2a, 0xc1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/internal/pages/assets/html/containers.html": cmdInternalPagesAssetsHtmlContainersHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"internal": {nil, map[string]*bintree{
			"pages": {nil, map[string]*bintree{
				"assets": {nil, map[string]*bintree{
					"html": {nil, map[string]*bintree{
						"containers.html": {cmdInternalPagesAssetsHtmlContainersHtml, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
