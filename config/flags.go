package config

import "flag"

func AddFlags() {
	flag.StringVar(&Global.CadvisorIP, "listen_ip", Global.CadvisorIP, "IP to listen on, defaults to all IPs")
	flag.IntVar(&Global.CadvisorPort, "port", Global.CadvisorPort, "port to listen")
	flag.IntVar(&Global.MaxProcs, "max_procs", Global.MaxProcs, "max number of CPUs that can be used simultaneously. Less than 1 for default (number of cores).")
	flag.StringVar(&Global.HTTPAuthFile, "http_auth_file", Global.HTTPAuthFile, "HTTP auth file for the web UI")
	flag.StringVar(&Global.HTTPAuthRealm, "http_auth_realm", Global.HTTPAuthRealm, "HTTP auth realm for the web UI")
	flag.StringVar(&Global.HTTPDigestFile, "http_digest_file", Global.HTTPDigestFile, "HTTP digest file for the web UI")
	flag.StringVar(&Global.HTTPDigestRealm, "http_digest_realm", Global.HTTPDigestRealm, "HTTP digest file for the web UI")
	flag.StringVar(&Global.PrometheusEndpoint, "prometheus_endpoint", Global.PrometheusEndpoint, "Endpoint to expose Prometheus metrics on")
	flag.DurationVar(&Global.MaxHousekeepingInterval, "max_housekeeping_interval", Global.MaxHousekeepingInterval, "Largest interval to allow between container housekeepings")
	flag.BoolVar(&Global.AllowDynamicHousekeeping, "allow_dynamic_housekeeping", Global.AllowDynamicHousekeeping, "Whether to allow the housekeeping interval to be dynamic")
	flag.BoolVar(&Global.EnableProfiling, "profiling", Global.EnableProfiling, "Enable profiling via web interface host:port/debug/pprof/")
	flag.StringVar(&Global.ContainerHintsFile, "container_hints", Global.ContainerHintsFile, "location of the container hints file")
	flag.StringVar(&Global.CollectorCert, "collector_cert", Global.CollectorCert, "Collector's certificate, exposed to endpoints for certificate based authentication.")
	flag.StringVar(&Global.CollectorKey, "collector_key", Global.CollectorKey, "Key for the collector's certificate")
	flag.StringVar(&Global.Docker.Endpoint, "docker", Global.Docker.Endpoint, "docker endpoint")
	flag.StringVar(&Global.Docker.RootDir, "docker_root", Global.Docker.RootDir, "Absolute path to the Docker state root directory (default: /var/lib/docker)")
	flag.StringVar(&Global.Docker.RunDir, "docker_run", Global.Docker.RunDir, "Absolute path to the Docker run directory (default: /var/run/docker)")
	flag.StringVar(&Global.Docker.EnvWhitelist, "docker_env_metadata_whitelist", Global.Docker.EnvWhitelist, "a comma-separated list of environment variable keys that needs to be collected for docker containers")
	flag.BoolVar(&Global.Docker.DockerOnly, "docker_only", Global.Docker.DockerOnly, "Only report docker containers in addition to root stats")
	flag.DurationVar(&Global.HousekeepingInterval, "housekeeping_interval", Global.HousekeepingInterval, "Interval between container housekeepings")
	flag.StringVar(&Global.MachineIDFilePath, "machine_id_file", Global.MachineIDFilePath, "Comma-separated list of files to check for machine-id. Use the first one that exists.")
	flag.StringVar(&Global.BootIDFilePath, "boot_id_file", Global.BootIDFilePath, "Comma-separated list of files to check for boot-id. Use the first one that exists.")
	flag.DurationVar(&Global.GlobalHousekeepingInterval, "global_housekeeping_interval", Global.GlobalHousekeepingInterval, "Interval between global housekeepings")
	flag.BoolVar(&Global.LogCadvisorUsage, "log_cadvisor_usage", Global.LogCadvisorUsage, "Whether to log the usage of the cAdvisor container")
	flag.BoolVar(&Global.EnableLoadReader, "enable_load_reader", Global.EnableLoadReader, "Whether to enable cpu load reader")
	flag.StringVar(&Global.EventStorageAgeLimit, "event_storage_age_limit", Global.EventStorageAgeLimit, "Max length of time for which to store events (per type). Value is a comma separated list of key values, where the keys are event types (e.g.: creation, oom) or \"default\" and the value is a duration. Default is applied to all non-specified event types")
	flag.StringVar(&Global.EventStorageEventLimit, "event_storage_event_limit", Global.EventStorageEventLimit, "Max number of events to store (per type). Value is a comma separated list of key values, where the keys are event types (e.g.: creation, oom) or \"default\" and the value is an integer. Default is applied to all non-specified event types")
	flag.IntVar(&Global.ApplicationMetricsCountLimit, "application_metrics_count_limit", Global.ApplicationMetricsCountLimit, "Max number of application metrics to store (per container)")
	flag.StringVar(&Global.ClientID, "bq_id", Global.ClientID, "Client ID")
	flag.StringVar(&Global.ClientSecret, "bq_secret", Global.ClientSecret, "Client Secret")
	flag.StringVar(&Global.ProjectID, "bq_project_id", Global.ProjectID, "Bigquery project ID")
	flag.StringVar(&Global.ServiceAccount, "bq_account", Global.ServiceAccount, "Service account email")
	flag.StringVar(&Global.PemFile, "bq_credentials_file", Global.PemFile, "Credential Key file (pem)")
	flag.DurationVar(&Global.CacheDuration, "storage_duration", Global.CacheDuration, "How long to keep data cached in memory.")
}
